from rest_framework import generics, status
from rest_framework.parsers import (
    MultiPartParser,
    FormParser,
)  # Essential for file uploads
from rest_framework.permissions import IsAuthenticated  # As per your guiding principles
from rest_framework.response import Response
from rest_framework.exceptions import ValidationError  # DRF's specific validation error

from .models import ServiceRequest
from .serializers import ServiceRequestSerializer


class ServiceRequestCreateAPIView(generics.CreateAPIView):
    """
    API endpoint for creating a new service request via POST.
    Handles multipart/form-data, validation, and custom response formats.
    """

    queryset = ServiceRequest.objects.all()
    serializer_class = ServiceRequestSerializer
    # Specify parsers to handle multipart/form-data for file uploads
    parser_classes = [MultiPartParser, FormParser]
    # Enforce authentication: only authenticated users can submit requests

    def create(self, request, *args, **kwargs):
        """
        Handles the POST request to create a ServiceRequest.
        Customizes success and error responses to match the specification.
        """
        serializer = self.get_serializer(data=request.data)
        try:
            # Validate the serializer data. If validation fails, it raises ValidationError.
            serializer.is_valid(raise_exception=True)
            self.perform_create(serializer)  # Saves the object
            headers = self.get_success_headers(serializer.data)

            # --- SUCCESS Response (201 Created) ---
            # Format the response exactly as specified
            return Response(
                {
                    "id": serializer.instance.id,  # Custom ID generated by model
                    "status": serializer.instance.status,
                    "message": "Service request submitted successfully.",
                },
                status=status.HTTP_201_CREATED,
                headers=headers,
            )
        except ValidationError as e:
            # --- CLIENT-SIDE ERROR Response (400 Bad Request) ---
            # Reformat DRF's validation errors to match the specified 'errors' structure
            formatted_errors = {}
            for field, messages in e.detail.items():
                # Assuming messages is a list and we only need the first error string
                if isinstance(messages, list) and messages:
                    formatted_errors[field] = messages[0]
                else:
                    formatted_errors[field] = str(
                        messages
                    )  # Handle cases where message isn't a list

            return Response(
                {"message": "The given data was invalid.", "errors": formatted_errors},
                status=status.HTTP_400_BAD_REQUEST,
            )
        except Exception as e:
            # --- SERVER-SIDE ERROR Response (500 Internal Server Error) ---
            # Catch any unexpected errors during processing.
            # In a real application, you'd log 'e' here for debugging.
            print(
                f"An unexpected server error occurred: {e}"
            )  # For development debugging
            return Response(
                {
                    "message": "An unexpected server error occurred. Please try again later or contact support."
                },
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

    def perform_create(self, serializer):
        """
        Performs the actual object creation after validation.
        """
        serializer.save()
